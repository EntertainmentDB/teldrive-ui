/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["Auth_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["Auth_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get session information */
        get: operations["Auth_session"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/ws": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Websocket QR Login */
        get: operations["Auth_ws"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get events
         * @description Get events
         */
        get: operations["Events_getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all files */
        get: operations["Files_list"];
        put?: never;
        /** Create a new file */
        post: operations["Files_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get category stats */
        get: operations["Files_categoryStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete files */
        post: operations["Files_delete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/mkdir": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Folders */
        post: operations["Files_mkdir"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move files */
        post: operations["Files_move"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get file by ID */
        get: operations["Files_getById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update file */
        patch: operations["Files_update"];
        trace?: never;
    };
    "/files/{id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copy file */
        post: operations["Files_copy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{id}/parts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update file parts */
        put: operations["Files_updateParts"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{id}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get share by file ID */
        get: operations["Files_shareByid"];
        put?: never;
        /** Create a share for the file */
        post: operations["Files_createShare"];
        /** Delete share */
        delete: operations["Files_deleteShare"];
        options?: never;
        head?: never;
        /** Edit share */
        patch: operations["Files_editShare"];
        trace?: never;
    };
    "/files/{id}/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream or Download file */
        get: operations["Files_stream"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shares/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get share by ID */
        get: operations["Shares_getById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shares/{id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List files in share */
        get: operations["Shares_listFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shares/{id}/files/{fileId}/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream or Download shared file */
        get: operations["Shares_stream"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shares/{id}/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unlock share */
        post: operations["Shares_unlock"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get upload stats */
        get: operations["Uploads_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get uploaded parts by ID */
        get: operations["Uploads_partsById"];
        put?: never;
        /** Upload file */
        post: operations["Uploads_upload"];
        /** Delete uploaded file */
        delete: operations["Uploads_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/bots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add bots to user account */
        post: operations["Users_addBots"];
        /** Remove bots from user account */
        delete: operations["Users_removeBots"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user channels */
        get: operations["Users_listChannels"];
        put?: never;
        /** Create user channel */
        post: operations["Users_createChannel"];
        delete?: never;
        options?: never;
        head?: never;
        /** Update user channel */
        patch: operations["Users_updateChannel"];
        trace?: never;
    };
    "/users/channels/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Sync user channels */
        patch: operations["Users_syncChannels"];
        trace?: never;
    };
    "/users/channels/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete user channel */
        delete: operations["Users_deleteChannel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user config */
        get: operations["Users_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/profile/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user profile photo */
        get: operations["Users_profileImage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user sessions */
        get: operations["Users_listSessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/sessions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove user session */
        delete: operations["Users_removeSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API version */
        get: operations["Version_version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AddBots: {
            /** @description List of bot tokens */
            bots: string[];
        };
        ApiVersion: {
            /**
             * @description API version
             * @example 1.0.0
             */
            version: string;
            /**
             * @description Git commit SHA
             * @example a1b2c3d4e5f6g7h8i9j0
             */
            commitSHA: string;
            /**
             * @description Go version
             * @example go1.17.1
             */
            goVersion: string;
            /**
             * @description Operating system
             * @example linux
             */
            os: string;
            /**
             * @description Architecture
             * @example amd64
             */
            arch: string;
        };
        /**
         * @description Supported file categories
         * @enum {string}
         */
        Category: "archive" | "audio" | "document" | "image" | "other" | "video";
        /**
         * @description Statistics for files by category
         * @example {
         *       "totalFiles": 1250,
         *       "totalSize": 104857600,
         *       "category": "document"
         *     }
         */
        CategoryStats: {
            /**
             * Format: int64
             * @description Total number of files
             */
            totalFiles: number;
            /**
             * Format: int64
             * @description Total size of files in bytes
             */
            totalSize: number;
            /** @description Category name */
            category: components["schemas"]["Category"];
        };
        /**
         * @description Telegram channel information
         * @example {
         *       "channelName": "Channel Name",
         *       "channelId": 123456789
         *     }
         */
        Channel: {
            /** @description Name of the Telegram channel */
            channelName: string;
            /**
             * Format: int64
             * @description Unique numeric identifier of the channel
             */
            channelId?: number;
        };
        /**
         * @description Telegram channel information
         * @example {
         *       "channelName": "Channel Name",
         *       "channelId": 123456789
         *     }
         */
        ChannelUpdate: {
            /** @description Name of the Telegram channel */
            channelName?: string;
            /**
             * Format: int64
             * @description Unique numeric identifier of the channel
             */
            channelId?: number;
        };
        /** @description Standard error response */
        Error: {
            /**
             * @description Error code
             * @example 500
             */
            code: number;
            /**
             * @description Error message
             * @example Internal server error occurred
             */
            message: string;
        };
        /** @description Event information */
        Event: {
            /**
             * @description Event ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Event type
             * @example file_update
             */
            type: string;
            /**
             * Format: date-time
             * @description Event timestamp
             */
            createdAt: string;
            /** @description Event Source */
            source: components["schemas"]["Source"];
        };
        /** @description File metadata */
        File: {
            /**
             * @description File ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            readonly id?: string;
            /**
             * @description File name
             * @example document.pdf
             */
            name: string;
            /**
             * @description File type
             * @example file
             * @enum {string}
             */
            type: "folder" | "file";
            /** @description File parts */
            parts?: components["schemas"]["Part"][];
            /**
             * @description MIME type
             * @example application/pdf
             */
            mimeType?: string;
            /**
             * @description File category
             * @example document
             */
            readonly category?: components["schemas"]["Category"];
            /**
             * Format: int64
             * @description Channel ID
             * @example 123456789
             */
            channelId?: number;
            /**
             * @description File or Folder path
             * @example /documents/2023/
             */
            path?: string;
            /**
             * @description Parent folder ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            parentId?: string;
            /**
             * Format: int64
             * @description File size in bytes
             * @example 1048576
             */
            size?: number;
            /**
             * @description Encryption status
             * @example false
             */
            encrypted?: boolean;
            /**
             * Format: date-time
             * @description Last update time
             */
            readonly updatedAt?: string;
        };
        /**
         * @description File Copy request
         * @example {
         *       "newName": "document_copy.pdf",
         *       "destination": "/Documents/2023/"
         *     }
         */
        FileCopy: {
            /** @description New file name */
            newName?: string;
            /** @description Destination path for the copied file */
            destination: string;
            /**
             * Format: date-time
             * @description Last update time
             */
            updatedAt?: string;
        };
        /**
         * @description Delete operation request
         * @example {
         *       "ids": [
         *         "123e4567-e89b-12d3-a456-426614174000"
         *       ]
         *     }
         */
        FileDelete: {
            /** @description Array of file or folders ids to be deleted */
            ids: string[];
        };
        /** @description Paginated file listing response with metadata */
        FileList: {
            /** @description Array of file entries in the current page */
            items: components["schemas"]["File"][];
            /** @description Pagination metadata and total count information */
            meta: components["schemas"]["Meta"];
        };
        /**
         * @description Request to create directories
         * @example {
         *       "path": "/Documents/2023/"
         *     }
         */
        FileMkDir: {
            /** @description Directory path to be created */
            path: string;
        };
        /**
         * @description Move multiple files by ids or path
         * @example {
         *       "ids": [
         *         "123e4567-e89b-12d3-a456-426614174000"
         *       ],
         *       "destinationParent": "/Documents/2023/"
         *     }
         */
        FileMove: {
            /** @description Array of file or folders ids to be moved */
            ids: string[];
            /** @description Destination parent path or ID where files will be moved to */
            destinationParent: string;
            /** @description Destination file or folder name */
            destinationName?: string;
        };
        /** @description File parts update request */
        FilePartsUpdate: {
            /**
             * @description File name
             * @example document.pdf
             */
            name?: string;
            /**
             * @description Parent folder ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            parentId?: string;
            /**
             * Format: int64
             * @description Channel ID
             * @example 123456
             */
            channelId?: number;
            /** @description Upload ID */
            uploadId?: string;
            /** @description File parts */
            parts?: components["schemas"]["Part"][];
            /**
             * Format: int64
             * @description File size in bytes
             * @example 1048576
             */
            size: number;
            /**
             * Format: date-time
             * @description Last update time
             */
            updatedAt: string;
        };
        /** @description File sharing information and settings */
        FileShare: {
            /**
             * @description Share ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Indicates if the shared file requires password protection
             * @example true
             */
            protected: boolean;
            /**
             * Format: int64
             * @description ID of the user who created the share
             * @example 123456789
             */
            userId?: number;
            /**
             * @description File type
             * @example file
             * @enum {string}
             */
            type: "folder" | "file";
            /** @description Name of the shared file or folder */
            name: string;
            /**
             * Format: date-time
             * @description Expiration date and time of the share link
             */
            expiresAt?: string;
        };
        /** @description File share creation request */
        FileShareCreate: {
            /**
             * @description Share password
             * @example securepass123
             */
            password?: string;
            /**
             * Format: date-time
             * @description Share expiration date
             */
            expiresAt?: string;
        };
        FileShareInfo: {
            /**
             * @description File name
             * @example document.pdf
             */
            name: string;
            /**
             * @description File type
             * @example file
             * @enum {string}
             */
            type: "folder" | "file";
            /**
             * Format: date-time
             * @description Share expiration date
             */
            expiresAt?: string;
            /**
             * Format: int64
             * @description Share User ID
             */
            userId: number;
            /**
             * @description Share Protection Status
             * @example false
             */
            protected: boolean;
        };
        /** @description File update request */
        FileUpdate: {
            /**
             * @description File name
             * @example document.pdf
             */
            name?: string;
            /** @description File parts */
            parts?: components["schemas"]["Part"][];
            /**
             * Format: int64
             * @description File size in bytes
             * @example 1048576
             */
            size?: number;
            /**
             * Format: date-time
             * @description Last update time
             */
            updatedAt?: string;
        };
        /** @description Pagination metadata containing count, page information */
        Meta: {
            /**
             * @description Total number of items matching the query
             * @example 1250
             */
            count: number;
            /**
             * @description Total number of available pages based on limit
             * @example 25
             */
            totalPages: number;
            /**
             * @description Current page number in the pagination
             * @example 1
             */
            currentPage: number;
        };
        /** @description File part information */
        Part: {
            /**
             * @description Part ID
             * @example 1
             */
            id: number;
            /**
             * @description Encryption salt
             * @example abc123
             */
            salt?: string;
        };
        /** @description User session information containing authentication and profile details */
        Session: {
            /**
             * @description User's display name or full name
             * @example John Doe
             */
            name: string;
            /**
             * @description Telegram username without @ symbol
             * @example johndoe
             */
            userName: string;
            /**
             * Format: int64
             * @description Telegram user ID (unique identifier)
             * @example 123456789
             */
            userId: number;
            /**
             * @description Premium subscription status
             * @example true
             */
            isPremium: boolean;
            /**
             * @description Session hash for verification and security
             * @example a1b2c3d4e5f6g7h8i9j0
             */
            hash: string;
            /**
             * Format: date-time
             * @description Session expiration date
             */
            expires: string;
        };
        /** @description User session information containing authentication and profile details */
        SessionCreate: {
            /**
             * @description User's display name or full name
             * @example John Doe
             */
            name: string;
            /**
             * @description Telegram username without @ symbol
             * @example johndoe
             */
            userName: string;
            /**
             * Format: int64
             * @description Telegram user ID (unique identifier)
             * @example 123456789
             */
            userId: number;
            /**
             * @description Premium subscription status
             * @example true
             */
            isPremium: boolean;
            /**
             * @description Session hash for verification and security
             * @example a1b2c3d4e5f6g7h8i9j0
             */
            hash: string;
            /**
             * Format: date-time
             * @description Session expiration date
             */
            expires: string;
            /** @description Optional session token for client identification */
            session: string;
        };
        ShareUnlock: {
            /**
             * @description Share password
             * @example securepass123
             */
            password: string;
        };
        Source: {
            /**
             * @description File ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description File name
             * @example document.pdf
             */
            name: string;
            /**
             * @description File type
             * @example file
             * @enum {string}
             */
            type: "folder" | "file";
            /**
             * @description Parent ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            parentId: string;
            /**
             * @description Destination Parent ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            destParentId?: string;
        };
        /** @description Details of an uploaded part */
        UploadPart: {
            /** @description Name identifier of the part */
            name: string;
            /** @description Telegram Message ID */
            partId: number;
            /** @description Sequential number of the part */
            partNo: number;
            /**
             * Format: int64
             * @description Channel identifier associated with the upload
             */
            channelId: number;
            /**
             * Format: int64
             * @description Size of the part in bytes
             */
            size: number;
            /** @description Indicates if the part is encrypted */
            encrypted: boolean;
            /** @description Salt value used for encryption, required if encrypted is true */
            salt?: string;
        };
        /** @description Statistics about the upload */
        UploadStats: {
            /**
             * Format: date-time
             * @description Date and time when the upload occurred
             */
            uploadDate: string;
            /**
             * Format: int64
             * @description Total number of bytes uploaded
             */
            totalUploaded: number;
        };
        /**
         * @description User configuration for channel and bot settings
         * @example {
         *       "channelId": 123456789,
         *       "bots": [
         *         "bot1",
         *         "bot2"
         *       ]
         *     }
         */
        UserConfig: {
            /**
             * Format: int64
             * @description Channel identifier associated with the user
             */
            channelId: number;
            /** @description List of bot tokens */
            bots: string[];
        };
        /**
         * @description User session information
         * @example {
         *       "hash": "a1b2c3d4e5f6g7h8i9j0",
         *       "createdAt": "2023-10-21T07:28:00Z",
         *       "location": "New York, USA",
         *       "officialApp": true,
         *       "appName": "Telegram",
         *       "valid": true,
         *       "current": true
         *     }
         */
        UserSession: {
            /** @description Unique hash identifier for the session */
            hash: string;
            /**
             * Format: date-time
             * @description Session creation timestamp
             */
            createdAt: string;
            /** @description Geographic location where session was created */
            location?: string;
            /** @description Indicates if session is from an official Telegram app */
            officialApp?: boolean;
            /** @description Name of the application used for session */
            appName?: string;
            /** @description Indicates if the session is still valid */
            valid: boolean;
            /** @description Indicates if this is the currently active session */
            current: boolean;
        };
    };
    responses: never;
    parameters: {
        /** @description File category */
        "FileQuery.category": components["schemas"]["Category"][];
        /** @description Enable deep search */
        "FileQuery.deepSearch": boolean;
        /** @description Items per page */
        "FileQuery.limit": number;
        /** @description File name filter */
        "FileQuery.name": string;
        /** @description Operation */
        "FileQuery.operation": "list" | "find";
        /** @description Sort order */
        "FileQuery.order": "asc" | "desc";
        /** @description Page number */
        "FileQuery.page": number;
        /** @description Parent folder ID */
        "FileQuery.parentId": string;
        /** @description File path */
        "FileQuery.path": string;
        /** @description Search query */
        "FileQuery.query": string;
        /** @description Search type */
        "FileQuery.searchType": "text" | "regex";
        /** @description Show shared files */
        "FileQuery.shared": boolean;
        /** @description Sort field */
        "FileQuery.sort": "name" | "updatedAt" | "size" | "id";
        /** @description File Status */
        "FileQuery.status": "active" | "pending_deletion";
        /** @description File type */
        "FileQuery.type": "folder" | "file";
        /** @description UpdatedAt Filter supports operator eq, gt, lt, gte, lte */
        "FileQuery.updatedAt": string;
        /** @description Items per page */
        "ShareQuery.limit": number;
        /** @description Sort order */
        "ShareQuery.order": "asc" | "desc";
        /** @description Page number */
        "ShareQuery.page": number;
        /** @description Folder path */
        "ShareQuery.path": string;
        /** @description Sort field */
        "ShareQuery.sort": "name" | "updatedAt" | "size" | "id";
        /** @description Optional channel identifier for upload */
        "UploadQuery.channelId": number;
        /** @description Whether the upload content is encrypted */
        "UploadQuery.encrypted": boolean;
        /** @description Original file name */
        "UploadQuery.fileName": string;
        /** @description Name of the part being uploaded */
        "UploadQuery.partName": string;
        /** @description Part number in sequence */
        "UploadQuery.partNo": number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    Auth_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionCreate"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    "Set-Cookie": string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Auth_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    "Set-Cookie": string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Auth_session: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    "Set-Cookie": string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Auth_ws: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Informational */
            101: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Events_getEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_list: {
        parameters: {
            query?: {
                /** @description File name filter */
                name?: components["parameters"]["FileQuery.name"];
                /** @description Search query */
                query?: components["parameters"]["FileQuery.query"];
                /** @description Search type */
                searchType?: components["parameters"]["FileQuery.searchType"];
                /** @description File type */
                type?: components["parameters"]["FileQuery.type"];
                /** @description File path */
                path?: components["parameters"]["FileQuery.path"];
                /** @description Operation */
                operation?: components["parameters"]["FileQuery.operation"];
                /** @description File Status */
                status?: components["parameters"]["FileQuery.status"];
                /** @description Enable deep search */
                deepSearch?: components["parameters"]["FileQuery.deepSearch"];
                /** @description Show shared files */
                shared?: components["parameters"]["FileQuery.shared"];
                /** @description Parent folder ID */
                parentId?: components["parameters"]["FileQuery.parentId"];
                /** @description File category */
                category?: components["parameters"]["FileQuery.category"];
                /** @description UpdatedAt Filter supports operator eq, gt, lt, gte, lte */
                updatedAt?: components["parameters"]["FileQuery.updatedAt"];
                /** @description Sort field */
                sort?: components["parameters"]["FileQuery.sort"];
                /** @description Sort order */
                order?: components["parameters"]["FileQuery.order"];
                /** @description Items per page */
                limit?: components["parameters"]["FileQuery.limit"];
                /** @description Page number */
                page?: components["parameters"]["FileQuery.page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileList"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["File"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["File"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_categoryStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryStats"][];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileDelete"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_mkdir: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileMkDir"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_move: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileMove"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["File"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileUpdate"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["File"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_copy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileCopy"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["File"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_updateParts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilePartsUpdate"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_shareByid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileShare"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_createShare: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileShareCreate"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_deleteShare: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_editShare: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileShareCreate"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Files_stream: {
        parameters: {
            query?: {
                download?: "0" | "1";
                hash?: string;
            };
            header?: {
                Range?: string;
            };
            path: {
                id: string;
                name: string;
            };
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description File streaming response */
            200: {
                headers: {
                    /** @description Indicates server supports range requests */
                    "Accept-Ranges": "bytes";
                    /** @description Size of the response body in bytes */
                    "Content-Length": string;
                    /** @description File attachment information */
                    "Content-Disposition": string;
                    /** @description Range of bytes being sent */
                    "Content-Range"?: string;
                    /** @description Entity tag for cache validation */
                    Etag: string;
                    /** @description Last modification timestamp */
                    "Last-Modified": string;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description File streaming response */
            206: {
                headers: {
                    /** @description Indicates server supports range requests */
                    "Accept-Ranges": "bytes";
                    /** @description Size of the response body in bytes */
                    "Content-Length": string;
                    /** @description File attachment information */
                    "Content-Disposition": string;
                    /** @description Range of bytes being sent */
                    "Content-Range"?: string;
                    /** @description Entity tag for cache validation */
                    Etag: string;
                    /** @description Last modification timestamp */
                    "Last-Modified": string;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Shares_getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileShareInfo"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Shares_listFiles: {
        parameters: {
            query?: {
                /** @description Folder path */
                path?: components["parameters"]["ShareQuery.path"];
                /** @description Sort field */
                sort?: components["parameters"]["ShareQuery.sort"];
                /** @description Sort order */
                order?: components["parameters"]["ShareQuery.order"];
                /** @description Items per page */
                limit?: components["parameters"]["ShareQuery.limit"];
                /** @description Page number */
                page?: components["parameters"]["ShareQuery.page"];
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileList"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Shares_stream: {
        parameters: {
            query?: {
                download?: "0" | "1";
            };
            header?: never;
            path: {
                id: string;
                name: string;
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File streaming response */
            200: {
                headers: {
                    /** @description Indicates server supports range requests */
                    "Accept-Ranges": "bytes";
                    /** @description Size of the response body in bytes */
                    "Content-Length": string;
                    /** @description File attachment information */
                    "Content-Disposition": string;
                    /** @description Range of bytes being sent */
                    "Content-Range"?: string;
                    /** @description Entity tag for cache validation */
                    Etag: string;
                    /** @description Last modification timestamp */
                    "Last-Modified": string;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description File streaming response */
            206: {
                headers: {
                    /** @description Indicates server supports range requests */
                    "Accept-Ranges": "bytes";
                    /** @description Size of the response body in bytes */
                    "Content-Length": string;
                    /** @description File attachment information */
                    "Content-Disposition": string;
                    /** @description Range of bytes being sent */
                    "Content-Range"?: string;
                    /** @description Entity tag for cache validation */
                    Etag: string;
                    /** @description Last modification timestamp */
                    "Last-Modified": string;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Shares_unlock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShareUnlock"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Uploads_stats: {
        parameters: {
            query: {
                days: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadStats"][];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Uploads_partsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadPart"][];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Uploads_upload: {
        parameters: {
            query: {
                /** @description Name of the part being uploaded */
                partName: components["parameters"]["UploadQuery.partName"];
                /** @description Original file name */
                fileName: components["parameters"]["UploadQuery.fileName"];
                /** @description Part number in sequence */
                partNo: components["parameters"]["UploadQuery.partNo"];
                /** @description Optional channel identifier for upload */
                channelId?: components["parameters"]["UploadQuery.channelId"];
                /** @description Whether the upload content is encrypted */
                encrypted?: components["parameters"]["UploadQuery.encrypted"];
            };
            header: {
                "Content-Length": number;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "*/*": string;
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadPart"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Uploads_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_addBots: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddBots"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_removeBots: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_listChannels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"][];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_createChannel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Channel"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_updateChannel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChannelUpdate"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_syncChannels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_deleteChannel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserConfig"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_profileImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    Etag: string;
                    "Cache-Control": string;
                    "Content-Length": number;
                    "Content-Disposition": string;
                    [name: string]: unknown;
                };
                content: {
                    "image/jpeg": string;
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_listSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSession"][];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Users_removeSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Version_version: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiVersion"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
